apiVersion: v1
kind: Template
metadata:
  name: vmware-collector
  annotations:
    version: 0.11
    displayName: "VMware Collector"
    description: "VMware Collector for vSphere 5.0+"
objects:
- apiVersion: v1
  kind: Namespace
  metadata:
    name: 6fusion-vmware-collector
- apiVersion: v1
  kind: Service
  metadata:
    name: mongodb
    namespace: 6fusion-vmware-collector
    labels:
      6fusion-app: mongodb
  spec:
    ports:
    - port: 27017
      protocol: TCP
      name: mongodb-port
    selector:
      6fusion-app: mongodb
- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: mongodb
    namespace: 6fusion-vmware-collector
    labels:
      6fusion-app: mongodb
  spec:
    replicas: 1
    selector:
      6fusion-app: mongodb
    template:
      metadata:
        name: mongodb
        labels:
          6fusion-app: mongodb
      spec:
        containers:
        - name: mongodb
          image: mongo:3.2
          imagePullPolicy: IfNotPresent
- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: 6fusion-vmwarecollector-master
    namespace: 6fusion-vmware-collector
    labels:
      6fusion-app: vmwarecollector-master
  spec:
    replicas: 1
    selector:
      6fusion-app: vmwarecollector-master
    template:
      metadata:
        name: 6fusion-vmwarecollector-master
        labels:
          6fusion-app: vmwarecollector-master
      spec:
        containers:
        - name: vmware-collector-inventory
          image: 6fusion/vmware-collector:alpha
          imagePullPolicy: IfNotPresent
          env:
          - name: DEFAULT_DISK_IO
            valueFrom:
              secretKeyRef:
                key: default-disk-io
                name: on-prem-secret
          - name: DEFAULT_WAN_IO
            valueFrom:
              secretKeyRef:
                key: default-wan-io
                name: on-prem-secret
          - name: DEFAULT_LAN_IO
            valueFrom:
              secretKeyRef:
                key: default-lan-io
                name: on-prem-secret
          volumeMounts:
          - name: vsphere-secret
            mountPath: /var/run/secrets/vmwarecollector/vsphere
          - name: on-prem-secret
            mountPath: /var/run/secrets/vmwarecollector/on-prem
        volumes:
        - name: vsphere-secret
          secret:
            secretName: vsphere-secret
        - name: on-prem-secret
          secret:
            secretName: on-prem-secret
- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: 6fusion-vmwarecollector-metrics
    namespace: 6fusion-vmware-collector
    labels:
      6fusion-app: vmwarecollector-metrics
  spec:
    replicas: 1
    selector:
      6fusion-app: vmwarecollector-metrics
    template:
      metadata:
        name: 6fusion-vmwarecollector-metrics
        labels:
          6fusion-app: vmwarecollector-metrics
      spec:
        containers:
        - name: vmware-collector-metrics
          image: 6fusion/vmware-collector-metrics:alpha
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: vsphere-secret
            mountPath: /var/run/secrets/vmwarecollector/vsphere
          - name: on-prem-secret
            mountPath: /var/run/secrets/vmwarecollector/on-prem
        volumes:
        - name: vsphere-secret
          secret:
            secretName: vsphere-secret
        - name: on-prem-secret
          secret:
            secretName: on-prem-secret
parameters:
#vSphere questions
- description: "Host address of vSphere"
  name: host
  section: vSphere
  displayName: "vSphere Host"
  validations:
    required: true
  type: string
- name: user
  section: vSphere
  displayName: "vSphere User"
  validations:
    required: true
  type: string
  description: "Account used for vSphere access"
- name: password
  section: vSphere
  displayName: "vSphere Password"
  validations:
    required: true
  type: password
  description: "vSphere account password"
- name: ignore-ssl-errors
  section: vSphere
  displayName: "Ignore SSL validation errors?"
  validations:
    required: true
  type: boolean
  value: "false"
  description: "Perform strict SSL validation. Do not enable if using self-signed SSL certificates"
- name: readings-batch-size
  section: vSphere
  displayName: "Max Query Metrics"
  type: int
  value: "64"
  description: "Limit the number of entities that are included in a database query."
  advanced: true
# on prem questions
- name: api-host
  section: On-Prem
  type: string
  displayName: "Meter API Host"
  description: "Host address of 6fusion Meter"
  validations:
    required: true
  expandExpression: ${METER_API_HOST}
- name: api-endpoint
  section: On-Prem
  type: string
  displayName: "Meter API Version"
  description: "Versioend endpoint to use for Meter API"
  validations:
    required: true
  value: "api/v1"
- name: organization-id
  section: On-Prem
  type: string
  displayName: "Organization ID"
  description: "ID of organization object in the 6fusion Meter API"
  validations:
    required: true
  expandExpression: ${ORGANIZATION_ID}
- name: log-level
  section: vSphere
  displayName: "Log Level"
  validations:
    required: false
  value: info
  type: enum
  options:
    - debug
    - info
    - warn
    - error
    - fatal
- name: registration-date
  section: On-Prem
  type: string
  displayName: "Registration Date"
  description: "Time to start collection from."
  hidden: true
  validations:
    required: true
  expandExpression: "`Time.now`"
- name: machines-by-inv-timestamp
  section: On-Prem
  type: int
  validations:
    displayName: "Machines per request"
    validations:
      description: "Define the total of machines that are included on each request to obtain metrics from vsphere"
  required: true
  advanced: true
  value: "500"  # TODO confirm this default
- name: inventoried-limit
  section: On-Prem
  type: int
  displayName: "Inventory Limit"
  description: "The number of inventoried timestamps that each replica controller will take each round"
  validations:
    required: false
  value: "5"  # TODO confirm this default
  advanced: true
- name: default-disk-io
  section: On-Prem
  type: int
  displayName: "Default Disk I/O"
  description: "The value to use for Disk I/O if the collector cannot determine the actual disk I/O speed"
  validations:
    required: false
  value: "10000000000"
  advanced: true
- name: default-lan-io
  section: On-Prem
  type: int
  displayName: "Default LAN I/O"
  description: "The value to use for LAN I/O if the collector cannot determine the actual LAN I/O speed"
  validations:
    required: false
  value: "10000000000"
  advanced: true
- name: default-wan-io
  section: On-Prem
  type: int
  displayName: "Default WAN I/O"
  description: "The value to use for WAN I/O if the collector cannot determine the actual WAN I/O speed"
  validations:
    required: false
  advanced: true
  value: "100000000" 

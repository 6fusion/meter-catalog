apiVersion: v1
kind: Namespace
metadata:
  name: 6fusion-meter
---
apiVersion: v1
kind: Service
metadata:
  name: meter-api
  namespace: 6fusion-meter
spec:
  ports:
  - name: api-http
    port: 80
    targetPort: 80
    nodePort: 80
  - name: api-https
    port: 443
    targetPort: 443
    nodePort: 443
  selector:
    6fusion-app: api
  type: NodePort


---
apiVersion: v1
kind: Service
metadata:
  name: meter-dashboard
  namespace: 6fusion-meter
spec:
  ports:
  - name: dashboard-port
    port: 4443
    targetPort: 4443
    nodePort: 4443
  selector:
    6fusion-app: dashboard
  type: NodePort

---
apiVersion: v1
kind: Service
metadata:
  name: meter-database
  namespace: 6fusion-meter
spec:
  ports:
  - name: meter-db-port
    port: 5984
    targetPort: 5984
  selector:
    6fusion-app: database
---
apiVersion: v1
kind: Service
metadata:
  name: meter-cache
  namespace: 6fusion-meter
spec:
  ports:
  - name: cache-port
    port: 6379
    targetPort: 6379
  selector:
    6fusion-app: cache
---
apiVersion: v1
kind: Service
metadata:
  name: meter-sql-database
  namespace: 6fusion-meter
spec:
  ports:
    - name: sql-db-port
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    6fusion-app: sql-database
---
apiVersion: v1
kind: Service
metadata:
  name: retention-manager
  namespace: 6fusion-meter
spec:
  ports:
  - name: drm-port
    port: 80
    targetPort: 80
  selector:
    6fusion-app: retention-manager
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-logging
  namespace: kube-system
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "Elasticsearch"
spec:
  ports:
  - port: 9200
    protocol: TCP
    targetPort: 9200
    name: db
  - port: 9300
    protocol: TCP
    targetPort: 9300
    name: transport
  selector:
    k8s-app: elasticsearch-logging
---
apiVersion: v1
kind: Service
metadata:
  name: kibana-logging
  namespace: kube-system
  labels:
    k8s-app: kibana-logging
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "Kibana"
spec:
  ports:
  - port: 5601
    protocol: TCP
    targetPort: ui
  selector:
    k8s-app: kibana-logging
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: elasticsearch-logging-v1
  namespace: kube-system
  labels:
    k8s-app: elasticsearch-logging
    version: v1
    kubernetes.io/cluster-service: "true"
spec:
  replicas: 2
  selector:
    k8s-app: elasticsearch-logging
    version: v1
  template:
    metadata:
      labels:
        k8s-app: elasticsearch-logging
        version: v1
        kubernetes.io/cluster-service: "true"
    spec:
      containers:
      - image: gcr.io/google_containers/elasticsearch:<%= elasticsearch_tag %>
        name: elasticsearch-logging
        resources:
          # need more cpu upon initialization, therefore burstable class
          limits:
            cpu: 1000m
          requests:
            cpu: 100m
        ports:
        - containerPort: 9200
          name: db
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        volumeMounts:
        - name: es-persistent-storage
          mountPath: /data
        env:
        - name: "NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      volumes:
      - name: es-persistent-storage
        emptyDir: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kibana-logging
  namespace: kube-system
  labels:
    k8s-app: kibana-logging
    kubernetes.io/cluster-service: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: kibana-logging
  template:
    metadata:
      labels:
        k8s-app: kibana-logging
    spec:
      containers:
      - name: kibana-logging
        image: gcr.io/google_containers/kibana:<%= kibana_logging_tag %>
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
          requests:
            cpu: 100m
        env:
          - name: "ELASTICSEARCH_URL"
            value: "http://elasticsearch-logging:9200"
          - name: "KIBANA_BASE_URL"
            value: "/api/v1/proxy/namespaces/kube-system/services/kibana-logging"
        ports:
        - containerPort: 5601
          name: ui
          protocol: TCP
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: fluentd-es-v1.20
  namespace: kube-system
  labels:
    k8s-app: fluentd-es
    kubernetes.io/cluster-service: "true"
    version: v1.20
spec:
  template:
    metadata:
      labels:
        k8s-app: fluentd-es
        kubernetes.io/cluster-service: "true"
        version: v1.20
    spec:
      containers:
      - name: fluentd-es
        image: gcr.io/google_containers/fluentd-elasticsearch:<%= fluentd_tag %>
        command:
          - '/bin/sh'
          - '-c'
          - '/usr/sbin/td-agent 2>&1 >> /var/log/fluentd.log'
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: meter-database
  namespace: 6fusion-meter
  labels:
    6fusion-app: database
  annotations:
    componentType: Meter
    componentLabel: "Datastore"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        6fusion-app: database
    spec:
      containers:
      - name: meter-database
        image: docker.io/klaemo/couchdb:2.0
        imagePullPolicy: Always
        resources:
          limits:
            memory: "10Gi"
          requests:
            cpu: "2"
            memory: "100Mi"
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 5984
          name: meter-db-port
        volumeMounts:
        - name: meter-database
          mountPath: /usr/local/var/lib/couchdb
      imagePullSecrets:
      - name: meter-registry
      volumes:
      - name: meter-database
        hostPath:
          path: /opt/data/couchdb
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: meter-sql-database
  namespace: 6fusion-meter
  labels:
    6fusion-app: sql-database
    version: alpha
  annotations:
    componentType: Meter
    componentLabel: "Configuration Datastore"
spec:
  replicas: 1
  selector:
    6fusion-app: sql-database
  template:
    metadata:
      labels:
        6fusion-app: sql-database
    spec:
      containers:
      - name: meter-sql-database
        image: docker.io/postgres:9.5.5-alpine
        livenessProbe:
          exec:
            command:
            - "/bin/bash"
            - "-c"
            - "[[ \"$(stat -c %U /var/lib/postgresql/data)\" == \"postgres\" ]] || chown -R postgres:postgres /var/lib/postgresql/data"
          failureThreshold: 2
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: "0.25"
            memory: "100Mi"
        volumeMounts:
          - name: meter-sql-database
            mountPath: /var/lib/postgresql/data
      imagePullSecrets:
      - name: meter-registry
      volumes:
      - name: meter-sql-database
        hostPath:
          path: /opt/data/postgresql
---
apiVersion: v1
kind: ReplicationController
metadata:
  labels:
    6fusion-app: capacity
    version: alpha
  annotations:
    componentType: Meter
    componentLabel: "Capacity Calculator"
  name: 6fusion-capacity-calculator-alpha
  namespace: 6fusion-meter
spec:
  replicas: 1
  selector:
    6fusion-app: capacity
    version: alpha
  template:
    metadata:
      labels:
        6fusion-app: capacity
        version: alpha
    spec:
      containers:
      - image: docker.io/6fusion/utilization-tracker:alpha
        name: utilization-tracker
        imagePullPolicy: Always
        env:
        - name: RAILS_ENV
          value: production
        resources:
          limits:
            memory: "500Mi"
          requests:
            memory: "400Mi"
        livenessProbe:
          exec:
            command:
            - /usr/bin/pgrep
            - ruby
          initialDelaySeconds: 60
          timeoutSeconds: 10
      - image: docker.io/6fusion/wac-calculator:alpha
        name: wac-calculator
        resources:
          limits:
            memory: "15Mi"
          requests:
            memory: "10Mi"
        livenessProbe:
          httpGet:
            path: "/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
      - image: docker.io/6fusion/capacity-calculator:alpha
        name: capacity-calculator
        resources:
          limits:
            memory: "15Mi"
          requests:
            memory: "10Mi"
        livenessProbe:
          httpGet:
            path: "/health"
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
      - image: docker.io/6fusion/consumption-patterns:alpha
        name: consumption-patterns
        resources:
          limits:
            memory: "15Mi"
          requests:
            memory: "10Mi"
        livenessProbe:
          httpGet:
            path: "/health"
            port: 8082
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
      imagePullSecrets:
      - name: meter-registry
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: 6fusion-cost-calculator-alpha
  namespace: 6fusion-meter
  labels:
    6fusion-app: cost
    version: alpha
  annotations:
    componentType: Meter
    componentLabel: "Cost Calculator"
spec:
  replicas: 1
  selector:
    6fusion-app: cost
    version: alpha
  template:
    metadata:
      labels:
        6fusion-app: cost
        version: alpha
    spec:
      containers:
      - image: docker.io/6fusion/cost-calculator:alpha
        name: cost-calculator
        imagePullPolicy: Always
        env:
        - name: METER_ENV
          value: production
        livenessProbe:
          httpGet:
            path: "/health"
            port: 8083
          initialDelaySeconds: 30
          timeoutSeconds: 30
      imagePullSecrets:
      - name: meter-registry
---
apiVersion: v1
kind: ReplicationController
metadata:
  labels:
    6fusion-app: api
    version: alpha
  annotations:
    componentType: Meter
    componentLabel: "API"
  name: 6fusion-meter-api-alpha
  namespace: 6fusion-meter
spec:
  replicas: 1
  selector:
    6fusion-app: api
    version: alpha
  template:
    metadata:
      labels:
        6fusion-app: api
        version: alpha
      annotations:
        pod.beta.kubernetes.io/init-containers: '[{ "name": "couch-init", "imagePullPolicy": "Always", "image": "docker.io/6fusion/meter-api:alpha","imagePullSecrets": [{"name": "meter-registry"}], "command": ["rake", "couch:migrate"] } ]'
    spec:
      containers:
      - image: docker.io/6fusion/meter-api:alpha
        name: meter-api
        imagePullPolicy: Always
        env:
        - name: RAILS_ENV
          value: production
        resources:
          limits:
            memory: "1Gi"
          requests:
            cpu: "1"
            memory: "400Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 60
        volumeMounts:
        - name: secrets
          mountPath: /etc/secrets
          readOnly: true
      - image: docker.io/6fusion/wac-calculator:alpha
        name: wac-calculator
        resources:
          limits:
            memory: "15Mi"
          requests:
            memory: "15Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
      - image: docker.io/6fusion/consumption-patterns:alpha
        name: consumption-patterns
        resources:
          limits:
            memory: "15Mi"
          requests:
            memory: "10Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
      imagePullSecrets:
      - name: meter-registry
      volumes:
      - name: secrets
        secret:
          secretName: meter-api-ssl-secret
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: 6fusion-meter-dashboard-alpha
  namespace: 6fusion-meter
  labels:
    6fusion-app: dashboard
    version: alpha
  annotations:
    componentType: Meter
    componentLabel: "Dashboard"
spec:
  replicas: 1
  selector:
    6fusion-app: dashboard
    version: alpha
  template:
    metadata:
      labels:
        6fusion-app: dashboard
        version: alpha
      annotations:
        pod.beta.kubernetes.io/init-containers: '[{ "name": "init", "imagePullPolicy": "Always", "image": "docker.io/6fusion/meter-dashboard:alpha","imagePullSecrets": [{"name": "meter-registry"}], "command": ["/usr/bin/bundle", "exec", "rake", "db:create", "db:migrate", "doorkeeper:create_application", "settings:initialize"]}]'
    spec:
      containers:
      - image: docker.io/6fusion/meter-dashboard:alpha
        name: meter-dashboard
        imagePullPolicy: Always
        env:
        - name: RAILS_ENV
          value: production
        - name: SECRET_KEY_BASE
          value: 47422b073165a07d384e4f64adb43406d5ede9872c082b1cfcb7dd2439b0c8b5725747a67092592d7612f78847786ef86d110fe5c4ab245d949559a3265a72cc
        - name: METER_VERSION
          value: alpha
        - name: SSL_CERT_FILE
          value: /etc/ssl/certs/ca-certificates.crt
        resources:
          limits:
            memory: "300Mi"
          requests:
            memory: "300Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 4443
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 60
        volumeMounts:
        - name: secrets
          mountPath: /etc/secrets
          readOnly: true
        - name: kubernetes-ssl
          mountPath: /etc/kubernetes/ssl
        - name: host-ca-certificate
          mountPath: /etc/ssl/certs
      imagePullSecrets:
      - name: meter-registry
      volumes:
      - name: secrets
        secret:
          secretName: meter-api-ssl-secret
      - name: kubernetes-ssl
        hostPath:
          path: /etc/kubernetes/ssl
      - name: host-ca-certificate
        configMap:
          name: internet-proxy
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: meter-cache-alpha
  namespace: 6fusion-meter
  labels:
    6fusion-app: cache
    version: alpha
  annotations:
    componentType: Meter
    componentLabel: "Cache"
spec:
  replicas: 1
  selector:
    6fusion-app: cache
    version: alpha
  template:
    metadata:
      labels:
        6fusion-app: cache
        version: alpha
    spec:
      containers:
      - image: docker.io/redis:3.0.7-alpine
        name: meter-cache
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 10
      imagePullSecrets:
      - name: meter-registry
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: 6fusion-retention-manager-alpha
  namespace: 6fusion-meter
  labels:
    6fusion-app: retention-manager
    version: alpha
  annotations:
    componentType: Meter
    componentLabel: "Data Retention Manager"
spec:
  replicas: 1
  selector:
    6fusion-app: retention-manager
    version: alpha
  template:
    metadata:
      labels:
        6fusion-app: retention-manager
        version: alpha
    spec:
      containers:
      - image: docker.io/6fusion/data-retention-manager:alpha
        imagePullPolicy: Always
        name: retention-manager
        env:
        - name: METER_ENV
          value: production
      imagePullSecrets:
      - name: meter-registry
